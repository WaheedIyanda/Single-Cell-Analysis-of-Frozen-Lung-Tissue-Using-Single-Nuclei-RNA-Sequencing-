# -*- coding: utf-8 -*-
"""single_Cell_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SrvvadKFWJ5KahrVCQxDaEDOn4EUdavo
"""

!pip install scanpy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import scanpy as sc
import seaborn as sns

adata = sc.read_csv("/content/GSM5226574_C51ctr_raw_counts.csv", first_column_names=True).T

adata.X.shape

"""Quality control and Doublet Remover"""

!pip install scvi-tools

import scvi

sc.pp.filter_genes(adata, min_cells = 10)

sc.pp.highly_variable_genes(adata, n_top_genes=2000, subset=True, flavor='cell_ranger')

scvi.model.SCVI.setup_anndata(adata)
vae = scvi.model.SCVI(adata)
vae.train()

solo = scvi.external.SOLO.from_scvi_model(vae)
solo.train()

df = solo.predict()
df['prediction'] = solo.predict(soft = False)
df.index = df.index.map(lambda x: x[:-2])
df

df.groupby('prediction').count()

df['dif'] = df.doublet - df.singlet
df

sns.displot(df[df.prediction == 'doublet'], x = 'dif')

doublets = df[(df.prediction == 'doublet') & (df.dif > 1)]
doublets

adata = sc.read_csv("/content/GSM5226574_C51ctr_raw_counts.csv", first_column_names=True).T

adata.obs['doublet'] = adata.obs.index.isin(doublets.index)

adata.obs

adata = adata[~adata.obs.doublet]
adata

adata.var['mt'] = adata.var.index.str.startswith('MT-')

adata.var

ribo_url = "http://software.broadinstitute.org/gsea/msigdb/download_geneset.jsp?geneSetName=KEGG_RIBOSOME&fileType=txt"

ribo_genes = pd.read_table(ribo_url, skiprows=2, header = None)
ribo_genes

adata.var['ribo'] = adata.var_names.isin(ribo_genes[0].values)
adata.obs

sc.pp.calculate_qc_metrics(adata, qc_vars=['mt', 'ribo'], percent_top=None, log1p=False, inplace=True)

adata.var.sort_values('n_cells_by_counts')

sc.pp.filter_genes(adata, min_cells=5)

adata.var.sort_values('n_cells_by_counts')

sc.pl.violin(adata, ['n_genes_by_counts', 'total_counts', 'pct_counts_mt', 'pct_counts_ribo'], jitter=0.4, multi_panel=True)

set_upper_Lim= 2500
adata = adata[adata.obs.n_genes_by_counts < set_upper_Lim]
adata.obs

adata = adata[adata.obs.pct_counts_mt < 25]
adata = adata[adata.obs.pct_counts_ribo < 2]

"""#Normalization"""

sc.pp.normalize_total(adata, target_sum=1e4)

"""#Clustering"""

sc.pp.highly_variable_genes(adata, n_top_genes=2500, flavor='cell_ranger')

adata.var

sc.pl.highly_variable_genes(adata)

adata = adata[:, adata.var.highly_variable]

sc.pp.regress_out(adata, ['total_counts', 'pct_counts_mt', 'pct_counts_ribo'])

sc.pp.scale(adata, max_value=10)

sc.tl.pca(adata, svd_solver='arpack')
sc.pl.pca_variance_ratio(adata, log=True, n_pcs = 40)

sc.pp.neighbors(adata, n_pcs = 30)
sc.tl.umap(adata)
sc.pl.umap(adata)

!pip install leidenalg

sc.tl.leiden(adata, resolution = 1)

sc.pl.umap(adata, color=['leiden'])

"""Annotation and Finding Markers"""

sc.tl.rank_genes_groups(adata, 'leiden')

markers = sc.get.rank_genes_groups_df(adata, None)
markers = markers[(markers.pvals_adj < 0.05) & (markers.logfoldchanges > .5)]
markers



vae.adata = adata

sc.pl.umap(adata, color = ['leiden'], frameon = False, legend_loc = "on data")

sc.pl.umap(adata, color = ['CLVS1', 'DIPK1A'], frameon = False, layer = 'X', vmax = 5)

cell_type = {"0":"Macrophage",
"1":"Fibroblast",
"2":"CD4+ T-cell",
"3":"AT2",
"4":"AT1",
"5":"CD8+ T-cell",
"6":"Endothelial cell",
"7":"Plasma cell",
"8":"Macrophage",
"9":"AT2",
"10":"Fibroblast",
"11":"Fibroblast",
"12":"Macrophage",
"13":"Macrophage",
"14":"Airway epithelial",
"15":"Airway epithelial",
"16":"Monocyte",
"17":"Airway epithelial",
"18":"B-cell",
"19":"Aerocyte",
"20":"Airway epithelial",
"21":"Smooth muscle cell",
"22":"Cycling T/NK",
"23":"Neuronal cell",
"24":"Denditic cell",
"25":"Pericyte",
"26":"Fibroblast",
"27":"Erythroid-like",
"28":"Macrophage"
}

adata.obs['cell type'] = adata.obs.leiden.map(cell_type)

sc.pl.umap(adata, color = ['cell type'], frameon = True)

sc.pl.umap(adata,
           color=['CD74', 'RELN', 'PTPRC', 'BANK1', 'FYN', 'FGF10'],
           frameon= True,
           layer='X',
           vmax=5)

#Cell type Count Anlysis
cell_type_counts = adata.obs['cell type'].value_counts()

cell_type_percentages = cell_type_counts / cell_type_counts.sum() * 100
cell_type_percentages

Figure = plt.figure(figsize=(10, 6))
sns.barplot(x = cell_type_percentages.index, y = cell_type_percentages)
plt.ylabel('Percentage')
plt.xlabel('Cell Type')
plt.title('Percentage of Cell Types sample')
plt.xticks(rotation=90)
plt.show()

if 'log1p' not in adata.uns_keys():
    sc.pp.log1p(adata)
# Perform DE analysis
sc.tl.rank_genes_groups(adata, groupby='cell type', method='wilcoxon')
# View top DE genes for each group
pd.DataFrame(adata.uns['rank_genes_groups']['names']).head(5)

top_genes = pd.DataFrame(adata.uns['rank_genes_groups']['names']).head(10)
top_genes_list = top_genes.values.flatten().tolist()

sc.pl.heatmap(
    adata,
    var_names=top_genes_list,
    groupby='cell type',
    show_gene_labels=True,
    dendrogram=True,
    swap_axes=False,
    cmap='viridis',
    use_raw=False,
    figsize=(40, 18)
)

!pip install gseapy

"""#Gene Ontology (GO)"""

import gseapy as gp

enr = gp.enrichr(
    gene_list=top_genes_list,
    gene_sets=['GO_Biological_Process_2023', 'KEGG_2021_Human'],
    organism='Human'
)

# Visualize results
enr.results.head(10)

top_terms = enr.results.sort_values('Adjusted P-value').head(10)
plt.figure(figsize=(10, 6))
plt.barh(top_terms['Term'], -np.log10(top_terms['Adjusted P-value']), color='skyblue')
plt.xlabel('-log10(Adjusted P-value)')
plt.ylabel('Enriched Terms')
plt.title('Top Enriched GO Terms')
plt.gca().invert_yaxis()
plt.tight_layout()
plt.show()

top_terms = enr.results.sort_values('Adjusted P-value').head(50)

# Create a dot plot
plt.figure(figsize=(10, 15))
plt.scatter(
    -np.log10(top_terms['Adjusted P-value']),  # x-axis: significance
    top_terms['Term'],  # y-axis: enriched terms
    s=top_terms['Overlap'].str.split('/').str[0].astype(int) * 20,  # Size: number of genes
    c=-np.log10(top_terms['Adjusted P-value']),  # Color: significance
    cmap='viridis'
)
plt.xlabel('-log10(Adjusted P-value)')
plt.ylabel('Enriched Terms')
plt.title('Top Enriched GO Terms')
plt.colorbar(label='-log10(Adjusted P-value)')
plt.tight_layout()
plt.show()

!pip install networkx pyvis

import networkx as nx
from pyvis.network import Network

# Create a graph
G = nx.Graph()

# Add nodes and edges for top enriched terms and their genes
for _, row in enr.results.sort_values('Adjusted P-value').head(10).iterrows():
    term = row['Term']
    genes = row['Genes'].split(';')
    G.add_node(term, size=10, title=term)  # Add term as a node
    for gene in genes:
        G.add_node(gene, size=5, title=gene)  # Add gene as a node
        G.add_edge(term, gene)  # Add edge between term and gene

# Visualize the network
net = Network(notebook=True, height="500px", width="100%")
net.from_nx(G)
net.show("enrichment_network.html")

import IPython.display as display

display.display(display.HTML(filename="/content/enrichment_network.html"))

fig, ax = plt.subplots(figsize=(10, 10))
import matplotlib.image as mpimg
img = mpimg.imread('/content/GO network.jpeg')
plt.imshow(img)
plt.axis('off')
plt.show()

adata.X

import scipy
gene_expression = adata.X
if isinstance(gene_expression, scipy.sparse.csr_matrix):
    gene_expression = gene_expression.todense()
#########
df_gene_expression = pd.DataFrame(gene_expression,
                                  columns=adata.var_names,
                                  index=adata.obs_names)

df_gene_expression

"""#Gene Expression Prediction"""

